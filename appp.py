# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xk9Sbjc7lT6g1QsjCOal37waqifd4Cng
"""

import streamlit as st
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.metrics.pairwise import cosine_similarity

# Load Excel data
@st.cache_data
def load_data():
    df = pd.read_excel('financialsdata.xlsx')  # Excel reader
    df.columns = [col.strip().replace(" ", "_") for col in df.columns]  # Clean column names
    return df

df = load_data()

# Normalize features for similarity comparison
features = df[['EPS', 'PE_Ratio', 'PB_Ratio', 'ROE']].copy() # Include EPS and create a copy to avoid SettingWithCopyWarning

# Impute missing values with the median
for col in features.columns:
    features[col].fillna(features[col].median(), inplace=True)

scaler = StandardScaler()
features_scaled = scaler.fit_transform(features)
similarity_matrix = cosine_similarity(features_scaled)

# Function to filter by PE-based risk level
def filter_by_risk(data, risk_level):
    if risk_level == 'Low':
        return data[data['PE_Ratio'] < 8]
    elif risk_level == 'Medium':
        return data[(data['PE_Ratio'] >= 8) & (data['PE_Ratio'] < 12)]
    elif risk_level == 'High':
        return data[data['PE_Ratio'] >= 12]
    else:
        return data

# Function to recommend similar stocks
def recommend_stocks(base_stock, filtered_df, top_n=3):
    base_index = df[df['Stock'] == base_stock].index[0]
    similarity_scores = list(enumerate(similarity_matrix[base_index]))
    similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)
    filtered_indices = filtered_df.index.tolist()
    recommended_indices = [i for i, _ in similarity_scores if i in filtered_indices and i != base_index][:top_n]
    return df.loc[recommended_indices][['Stock', 'Sector', 'EPS', 'PE_Ratio', 'PB_Ratio', 'ROE']]

# --- Streamlit UI ---
st.set_page_config(page_title="üìä Stock Recommender", layout="centered")
st.title("üìà AI-Powered Stock Recommender")
st.markdown("Choose a **sector**, your **risk preference**, and a stock you like ‚Äî get similar stock suggestions!")

# Sector selection
sectors = sorted(df['Sector'].unique())
selected_sector = st.selectbox("Select your preferred sector:", sectors)

# Risk level selection
risk_level = st.radio("Choose your risk level (based on PE Ratio):", ['Low', 'Medium', 'High'])

# Filter based on user inputs
sector_filtered = df[df['Sector'] == selected_sector]
risk_filtered = filter_by_risk(sector_filtered, risk_level)

if risk_filtered.empty:
    st.warning("‚ö†Ô∏è No stocks found in this sector with the selected risk level.")
else:
    base_stock = st.selectbox("Select a base stock you like:", sorted(risk_filtered['Stock'].unique()))

    if st.button("üîç Recommend Similar Stocks"):
        recommendations = recommend_stocks(base_stock, risk_filtered)
        if recommendations.empty:
            st.info("No similar stocks found.")
        else:
            st.success(f"üìä Stocks similar to **{base_stock}** in {selected_sector}:")
            st.dataframe(recommendations)

# Footer
st.markdown("---")
st.caption("Made with ‚ù§Ô∏è using Streamlit + Machine Learning")